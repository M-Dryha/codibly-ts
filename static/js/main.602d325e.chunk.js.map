{"version":3,"sources":["redux/myProductSlice.tsx","redux/myFilterSlice.tsx","components/Loader/Loader.tsx","App.tsx","redux/store.tsx","index.tsx"],"names":["productApi","createApi","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","build","getProductsByPagination","query","pages","url","params","page","providesTags","getProducts","method","useGetProductsQuery","useGetProductsByPaginationQuery","myFilterSlice","createSlice","name","initialState","reducers","onChangeFilter","state","action","payload","actions","Loader","Container","sx","display","justifyContent","height","width","color","outerCircleColor","middleCircleColor","innerCircleColor","BasicView","lazy","styles","background","backgroundSize","backgroundRepeat","backgroundPosition","pt","App","fallback","maxWidth","pb","style","path","element","middleware","getDefaultMiddleware","store","configureStore","reducer","reducerPath","devTools","process","ReactDOM","createRoot","document","getElementById","render","StrictMode","basename"],"mappings":"+GAAA,0HAGaA,EAAaC,YAAU,CAClCC,UAAWC,YAAe,CACxBC,QAAS,2BAEXC,SAAU,CAAC,YACXC,UAAS,SAACC,GACR,MAAO,CACLC,wBAAyBD,EAAME,MAAyB,CACtDA,MAAO,eAACC,EAAa,uDAAG,EAAC,MAAM,CAC7BC,IAAI,4BAAD,OAA8BD,GACjCE,OAAQ,CACNC,KAAMH,GAET,EACDI,aAAc,CAAC,cAEjBC,YAAaR,EAAME,MAAuB,CACxCA,MAAO,iBAAO,CACZE,IAAK,uBACLK,OAAQ,MACT,EACDF,aAAc,CAAC,cAGrB,IAGaG,EACbjB,EADaiB,oBAAqBC,EAClClB,EADkCkB,+B,kCC9BpC,6CAEMC,EAAgBC,YAAY,CAChCC,KAAM,WACNC,aAAc,GACdC,SAAU,CACRC,eAAc,SAACC,EAAOC,GAEpB,OADQA,EAAOC,OAEjB,KAIWH,EAAmBL,EAAcS,QAAjCJ,eACAL,MAAqB,O,iGCKrBU,EAhBU,WACvB,OACE,cAACC,EAAA,EAAS,CAACC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,UAAW,SAEzD,cAAC,IAAY,CACXC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,iBAAiB,OACjBC,kBAAkB,UAClBC,iBAAiB,UAK3B,C,qJCdMC,EAAYC,gBAAK,kBAAM,mDAAqC,IAE5DC,EAAS,CACbZ,UAAW,CACTa,WAAY,oDACZC,eAAgB,QAChBC,iBAAkB,YAClBC,mBAAoB,SAEpBC,GAAI,SAIKC,EAAgB,WAC3B,OACE,cAAC,WAAQ,CAACC,SAAU,cAACpB,EAAA,EAAM,IAAI,SAC7B,cAACC,EAAA,EAAS,CAACoB,SAAS,KAAKnB,GAAI,CAAEgB,GAAI,EAAGI,GAAI,GAAKC,MAAOV,EAAOZ,UAAU,SACrE,cAAC,IAAM,UACL,cAAC,IAAK,CAACuB,KAAK,IAAIC,QAAS,cAACd,EAAS,WAK7C,E,sCCvBMe,EAAU,sBAAOC,YAAqB,CAAC,IAAE,CAAExD,IAAWuD,aAY7CE,EAVAC,YAAe,CAC5BC,SAAO,mBACJ3D,IAAW4D,YAAc5D,IAAW2D,SAAO,uBACpCxC,KAAa,GAEvBoC,aACAM,UAAUC,I,MCJCC,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACH,cAAC,IAAMC,WAAU,UACf,cAAC,IAAQ,CAACX,MAAOA,EAAM,SACrB,cAAC,IAAa,CAACY,SAAS,cAAa,SACnC,cAAC,EAAG,U","file":"static/js/main.602d325e.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\nimport { UserState } from '../types/data';\r\n\r\nexport const productApi = createApi({\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://reqres.in/api/',\r\n  }),\r\n  tagTypes: ['products'],\r\n  endpoints(build) {\r\n    return {\r\n      getProductsByPagination: build.query<UserState, number>({\r\n        query: (pages: number = 1) => ({\r\n          url: `products?per_page=5&page=${pages}`,\r\n          params: {\r\n            page: pages,\r\n          },\r\n        }),\r\n        providesTags: ['products'],\r\n      }),\r\n      getProducts: build.query<UserState, void>({\r\n        query: () => ({\r\n          url: 'products?per_page=12',\r\n          method: 'get',\r\n        }),\r\n        providesTags: ['products'],\r\n      }),\r\n    };\r\n  },\r\n});\r\n\r\nexport const { useGetProductsQuery, useGetProductsByPaginationQuery } =\r\n  productApi;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nconst myFilterSlice = createSlice({\r\n  name: 'myFilter',\r\n  initialState: '',\r\n  reducers: {\r\n    onChangeFilter(state, action:PayloadAction<string>) {\r\n      state = action.payload;\r\n      return state;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { onChangeFilter } = myFilterSlice.actions;\r\nexport default myFilterSlice.reducer;\r\n","import { ThreeCircles } from 'react-loader-spinner';\r\nimport { Container } from '@mui/material';\r\n\r\nconst Loader: React.FC = () => {\r\n  return (\r\n    <Container sx={{ display: 'flex', justifyContent: 'center' }}>\r\n      {\r\n        <ThreeCircles\r\n          height=\"50\"\r\n          width=\"50\"\r\n          color=\"#f06292\"\r\n          outerCircleColor=\"grey\"\r\n          middleCircleColor=\"#f06292\"\r\n          innerCircleColor=\"grey\"\r\n        />\r\n      }\r\n    </Container>\r\n  );\r\n};\r\nexport default Loader;\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport Container from '@mui/material/Container';\r\nimport Loader from './components/Loader';\r\nconst BasicView = lazy(() => import('./Views/BasicView/BasicView'));\r\n\r\nconst styles = {\r\n  Container: {\r\n    background: 'linear-gradient(90deg, #69b7eb, #b3dbd3, #f4d6db)',\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'center',\r\n    // backgroundColor: '#eee8d1',\r\n    pt: '20px',\r\n  },\r\n};\r\n\r\nexport const App: React.FC = () => {\r\n  return (\r\n    <Suspense fallback={<Loader />}>\r\n      <Container maxWidth=\"xl\" sx={{ pt: 4, pb: 4 }} style={styles.Container}>\r\n        <Routes>\r\n          <Route path=\"/\" element={<BasicView />} />\r\n        </Routes>\r\n      </Container>\r\n    </Suspense>\r\n  );\r\n};\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport myFilterSlice from './myFilterSlice';\r\nimport { productApi } from './myProductSlice';\r\n\r\nconst middleware = [...getDefaultMiddleware({}), productApi.middleware];\r\n\r\n const store = configureStore({\r\n  reducer: {\r\n    [productApi.reducerPath]: productApi.reducer,\r\n    filter: myFilterSlice,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n });\r\n\r\n\r\nexport default store;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { App } from './App';\r\nimport store from './redux/store';\r\nimport './index.css';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter basename=\"/codibly-ts\">\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}